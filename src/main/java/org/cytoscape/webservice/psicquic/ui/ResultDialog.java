package org.cytoscape.webservice.psicquic.ui;

import java.awt.Frame;
import java.net.URI;
import java.util.Map;

import javax.swing.GroupLayout;
import javax.swing.JDialog;
import javax.swing.LayoutStyle;
import javax.swing.table.DefaultTableModel;

/**
 * Display result of the query.
 * 
 */
public class ResultDialog extends JDialog {

	private static final long serialVersionUID = 6996385373168492882L;

	private Map<URI, String> dbNames;
	private DefaultTableModel model;

	private boolean mergeNetworks;

	/**
	 * Creates new form PSICQUICResultDialog
	 * 
	 */
	public ResultDialog(Frame parent, boolean modal, Map<URI, String> dbNames) {
		super(parent, modal);
		this.dbNames = dbNames;
		setTableModel();
		initComponents();
		mergeNetworks = false;
	}

	private void setTableModel() {
		resultTable = new javax.swing.JTable(new DefaultTableModel() {
			@Override
			public boolean isCellEditable(int row, int column) {
				if (column == 0)
					return false;
				else
					return true;
			}
		});

		model = (DefaultTableModel) resultTable.getModel();
		model.addColumn("Service URL", dbNames.keySet().toArray());
		model.addColumn("Network Name (Please edit these if necessary)");
		for (int i = 0; i < model.getRowCount(); i++) {
			model.setValueAt(dbNames.get(model.getValueAt(i, 0)), i, 1);
		}

		resultTable.getTableHeader().setReorderingAllowed(false);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		setTitle("PSICQUIC Import Result");

		titlePanel = new javax.swing.JPanel();
		titleLabel = new javax.swing.JLabel();
		resultScrollPane = new javax.swing.JScrollPane();

		buttonPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		mergeButton = new javax.swing.JButton();
		mergeButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		titlePanel.setBackground(java.awt.Color.white);

		titleLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
		titleLabel.setText("PSICQUIC Data Import Result");

		GroupLayout titlePanelLayout = new GroupLayout(titlePanel);
		titlePanel.setLayout(titlePanelLayout);
		titlePanelLayout.setHorizontalGroup(titlePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(
						titlePanelLayout.createSequentialGroup().addContainerGap().addComponent(titleLabel)
								.addContainerGap(390, Short.MAX_VALUE)));
		titlePanelLayout.setVerticalGroup(titlePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
				titlePanelLayout.createSequentialGroup().addContainerGap().addComponent(titleLabel)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		resultScrollPane.setBackground(java.awt.Color.white);

		resultScrollPane.setViewportView(resultTable);

		buttonPanel.setBackground(java.awt.Color.white);

		okButton.setText("OK");
		okButton.setPreferredSize(new java.awt.Dimension(70, 26));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		mergeButton.setText("Merge");
		mergeButton.setPreferredSize(new java.awt.Dimension(70, 26));
		mergeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mergeButtonActionPerformed(evt);
			}
		});

		GroupLayout buttonPanelLayout = new GroupLayout(buttonPanel);
		buttonPanel.setLayout(buttonPanelLayout);
		buttonPanelLayout.setHorizontalGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(
						GroupLayout.Alignment.TRAILING,
						buttonPanelLayout
								.createSequentialGroup()
								.addContainerGap(491, Short.MAX_VALUE)
								.addComponent(mergeButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(okButton, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));
		buttonPanelLayout.setVerticalGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(
						GroupLayout.Alignment.TRAILING,
						buttonPanelLayout
								.createSequentialGroup()
								.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(
										buttonPanelLayout
												.createParallelGroup(GroupLayout.Alignment.BASELINE)
												.addComponent(okButton, GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
												.addComponent(mergeButton, GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
								.addContainerGap()));

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addComponent(titlePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(resultScrollPane, GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
				.addComponent(buttonPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addComponent(titlePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(resultScrollPane, GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(buttonPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)));

		pack();
	}// </editor-fold>

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		this.dispose();
	}

	private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		mergeNetworks = true;
		this.dispose();
	}

	public boolean isMerge() {
		return mergeNetworks;
	}

	public Map<URI, String> getNewNames() {
		for (int i = 0; i < resultTable.getModel().getRowCount(); i++) {
			// TODO: FIXME use suggested network naming utility.
			final String newName = resultTable.getModel().getValueAt(i, 1).toString();
			dbNames.put((URI) resultTable.getModel().getValueAt(i, 0), newName);
		}
		return dbNames;
	}

	// Variables declaration - do not modify
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton mergeButton;
	private javax.swing.JButton okButton;
	private javax.swing.JScrollPane resultScrollPane;
	private javax.swing.JTable resultTable;
	private javax.swing.JLabel titleLabel;
	private javax.swing.JPanel titlePanel;
	// End of variables declaration

}
